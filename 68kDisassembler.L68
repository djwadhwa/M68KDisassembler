00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 5/23/2020 1:47:58 AM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :  68k Disassebler
00000000                             3  * Written by :  Dj Wadhwa, Mohammed Ali, Tarcisius Hartanto
00000000                             4  * Date       :  June 2nd, 2020
00000000                             5  * Description:  This program decodes machine code and turns it into assembly code for the 68k processor
00000000                             6  *-----------------------------------------------------------
00000000  =0000000D                  7  CR  EQU $0D
00000000  =0000000A                  8  LF  EQU $0A
00000000                             9  
00000000= 54 68 69 73 20 69 ...     10  StartingMsg         dc.b    'This is our 68k Disassembler',CR,LF,0
0000001F= 43 72 65 61 74 6F ...     11  Creators            dc.b    'Creators: Mohammed Ali, DJ Wadhwa, Tarcisius',CR,LF,0
0000004E                            12  
0000004E= 53 74 61 72 74 20 ...     13  InputMsg1           dc.b    'Start by giving a starting address in range (00009000,00FFFFFF) ',0
0000008F= 4E 6F 77 20 67 69 ...     14  InputMsg2           dc.b    'Now give an ending adress in range (00009000,00FFFFFF) ',0
000000C7= 54 68 69 73 20 69 ...     15  InputIsInc          dc.b    'This input is not an address',0
000000E4= 54 68 65 20 65 6E ...     16  EndAddressInc       dc.b    'The end address is before the starting address, TRY AGAIN',0
0000011E= 45 72 72 6F 72 20 ...     17  ErrorMsg            dc.b    'Error in Input',0
0000012D                            18  
0000012D= 43 6F 6D 70 6C 65 ...     19  HextoASCIIMsg       dc.b    'Completed hex to ASCII conversion',0
0000014F= 43 6F 6D 70 6C 65 ...     20  ASCIItoHexMsg       dc.b    'Completed ASCII to hex conversion',CR,LF,0
00000173                            21  
00000173= 2D 2D 2D 2D 2D 2D ...     22  EndOfMemLoop        dc.b    '-------End of mem loop----',CR,LF,0
00000190= 49 6E 70 75 74 73 ...     23  HelpMsg             dc.b    'Inputs must be in hexadecimal in this format --> FFFFFFFF',CR,LF,0
000001CC= 57 6F 75 6C 64 20 ...     24  ContinueOrNotMsg    dc.b    'Would you like to Contunue or quit',0
000001EF= 45 78 69 74 74 69 ...     25  ExitMsg             dc.b    'Exitting Program',0
00000200                            26  
00000200                            27  START_ADDR_BUFFER  DS.B    256
00000300                            28  END_ADDR_BUFFER    DS.B    256
00000400                            29  
00000400                            30  
00001000                            31      ORG    $1000    *Start at address $1000
00001000                            32  START:                  ; first instruction of program
00001000                            33  
00001000                            34  *---------- Beginning Messages ----------*
00001000                            35      
00001000  103C 000E                 36      move.b      #14,D0
00001004  43F8 0000                 37      lea         StartingMsg,A1 
00001008  4E4F                      38      trap        #15
0000100A                            39      
0000100A  103C 000E                 40      move.b      #14,D0
0000100E  43F8 001F                 41      lea         Creators,A1
00001012  4E4F                      42      trap        #15
00001014                            43      
00001014  4EB9 00001066             44      jsr         MENU
0000101A                            45      
0000101A                            46      
0000101A                            47  * ---------- END OF PROGRAM -------------*
0000101A                            48  
0000101A  103C 000E                 49      move.b      #14,D0
0000101E  43F8 01EF                 50      lea         ExitMsg,A1 
00001022  4E4F                      51      trap        #15
00001024                            52      
00001024  103C 0009                 53      move.b      #9,D0
00001028  4E4F                      54      trap        #15
0000102A                            55  * ---------------------------------------*
0000102A                            56      
0000102A                            57  *-- End of Opening and Ending Messages --*
0000102A                            58  
0000102A                            59  *--------- Start of I/O Section ---------*
0000102A                            60  
0000102A                            61  Clear_Registers:
0000102A  4280                      62      clr.l     D0
0000102C  4281                      63      clr.l     D1
0000102E  4282                      64      clr.l     D2
00001030  4283                      65      clr.l     D3
00001032  4284                      66      clr.l     D4
00001034  4285                      67      clr.l     D5
00001036  4286                      68      clr.l     D6
00001038  4287                      69      clr.l     D7
0000103A                            70      
0000103A  207C 00000000             71      movea.l   #0,A0
00001040  227C 00000000             72      movea.l   #0,A1
00001046  247C 00000000             73      movea.l   #0,A2
0000104C  267C 00000000             74      movea.l   #0,A3
00001052  287C 00000000             75      movea.l   #0,A4
00001058  2A7C 00000000             76      movea.l   #0,A5
0000105E  2C7C 00000000             77      movea.l   #0,A6
00001064  4E75                      78      rts
00001066                            79  
00001066                            80  MENU:
00001066  4EB8 102A                 81      jsr         Clear_Registers
0000106A  4EB9 00001084             82      jsr         GetStartAddress
00001070  4EB9 0000109E             83      jsr         GetEndAddress
00001076  4EB9 000010B8             84      jsr         CheckAddress
0000107C                            85      
0000107C  4EB9 000010BC             86      jsr         MemSearch
00001082  4E75                      87      rts
00001084                            88      
00001084                            89  GetStartAddress:
00001084                            90      
00001084  103C 000E                 91      move.b      #14, D0         *Display input message
00001088  43F8 004E                 92      lea         InputMsg1,A1
0000108C  4E4F                      93      trap        #15
0000108E                            94      
0000108E  103C 0002                 95      move.b      #2,D0
00001092  4E4F                      96      trap        #15
00001094                            97          
00001094  4EB9 000010F0             98      jsr ASCIItoHex              *conversion to Hex
0000109A                            99      * Address Located in D6
0000109A  2846                     100      movea.l     D6,A4           *move into address register 4
0000109C  4E75                     101      rts
0000109E                           102      
0000109E                           103      
0000109E                           104  GetEndAddress:
0000109E  103C 000E                105      move.b      #14,D0          *Display input message
000010A2  43F8 008F                106      lea         InputMsg2,A1
000010A6  4E4F                     107      trap        #15
000010A8                           108      
000010A8  103C 0002                109      move.b      #2,D0
000010AC  4E4F                     110      trap        #15
000010AE                           111      
000010AE  4EB9 000010F0            112      jsr         ASCIItoHex      *conversion to hex
000010B4                           113      * Address Located in D6 (overwrite)
000010B4  2A46                     114      movea.l     D6,A5           *move into address register 5
000010B6  4E75                     115      rts
000010B8                           116      
000010B8                           117  CheckAddress:
000010B8  BBCC                     118      cmp.l       A4,A5
000010BA  67AA                     119      beq         Menu
000010BC                           120  
000010BC                           121      
000010BC                           122  MemSearch:
000010BC  4EB9 000010C4            123      jsr MemSearchLoop
000010C2  4E75                     124      rts
000010C4                           125      
000010C4                           126  MemSearchLoop:
000010C4                           127      
000010C4                           128      * Check if we reached the end address
000010C4  BBCC                     129      cmp.l       A4,A5
000010C6  6700 000E                130      beq         MemSearch_Done
000010CA                           131      
000010CA                           132      * Get data from memory
000010CA  3014                     133      move.w     (A4),D0
000010CC                           134      * OPCODE Word Located in D0
000010CC  4EB9 000010EE            135      jsr         OPCODE_DECODE
000010D2                           136          
000010D2                           137      
000010D2                           138      
000010D2                           139      
000010D2  544C                     140      adda.w      #2,A4
000010D4  60EE                     141      bra         MemSearchLoop
000010D6                           142      
000010D6                           143      
000010D6                           144  MemSearch_Done:
000010D6  103C 000E                145      move.b      #14,D0
000010DA  43F8 0173                146      lea         EndOfMemLoop,A1 
000010DE  4E4F                     147      trap        #15
000010E0  4E75                     148      rts
000010E2                           149      
000010E2                           150  TerminateOrCont:
000010E2                           151      * Used to check if user would like to terminate the program or continue to disassemble more data
000010E2  103C 000E                152      move.b      #14,D0
000010E6  43F8 01CC                153      lea         ContinueOrNotMsg,A1 
000010EA  4E4F                     154      trap        #15
000010EC                           155      
000010EC  4E75                     156      rts 
000010EE                           157  
000010EE                           158  * -------- Start of Opcode Section -------*    
000010EE                           159  
000010EE                           160  OPCODE_DECODE:
000010EE                           161      * Begin OPCODE Decoding here
000010EE                           162      * Check first four bits and begin
000010EE                           163      * if-branch breakdown
000010EE  4E75                     164      rts
000010F0                           165  
000010F0                           166      
000010F0                           167  * -------- End of Opcode Section --------*   
000010F0                           168  
000010F0                           169  * ----- Hex to ASCII & ASCII to HEX -----*
000010F0                           170  
000010F0                           171  ASCIItoHex:
000010F0  4EB9 000010FE            172          jsr     ASCII2Hex_init  
000010F6  4EB9 00001104            173          jsr     conversion_loop
000010FC  4E75                     174          rts                    
000010FE                           175  
000010FE                           176  ASCII2Hex_init:   
000010FE  143C 0000                177          move.b  #0,D2      
00001102  4E75                     178          rts         
00001104                           179          
00001104                           180  conversion_loop:            
00001104  5282                     181          add.l   #1,D2     
00001106  B4BC 00000009            182          cmp.l   #9,D2 
0000110C  6700 004A                183          BEQ     DONE        
00001110  1819                     184          move.b  (A1)+,D4    
00001112                           185          
00001112  B83C 0040                186          cmp.b   #$40,D4        
00001116  6E00 000C                187          bgt     Letters_Cap  
0000111A                           188          
0000111A  B83C 0039                189          cmp.b   #$39,D4
0000111E  6F00 0016                190          BLE     Numbers      
00001122  4E75                     191          rts
00001124                           192          
00001124                           193  Letters_Cap:      
00001124  B83C 0046                194          cmp.b   #$46,D4          
00001128  6E00 001E                195          bgt     ERROR  
0000112C  0404 0037                196          sub.b   #$37,D4     
00001130  E986                     197          asl.l   #4,D6       
00001132  DC84                     198          add.l   D4,D6     
00001134  60CE                     199          bra     conversion_loop 
00001136                           200  Numbers:
00001136  B83C 0030                201          cmp.b   #$30,D4         
0000113A  6D00 000C                202          blt     ERROR        
0000113E  0404 0030                203          sub.b   #$30,D4      
00001142  E986                     204          asl.l   #4,D6        
00001144  DC84                     205          add.l   D4,D6     
00001146  60BC                     206          bra     conversion_loop
00001148                           207          
00001148                           208  ERROR:
00001148  43F8 011E                209          lea     ErrorMsg,A1    
0000114C  103C 000E                210          move.b  #14,D0
00001150  4E4F                     211          trap    #15
00001152                           212      
00001152  103C 0009                213          move.b  #9,D0
00001156  4E4F                     214          trap    #15
00001158                           215          
00001158                           216  DONE:
00001158                           217     
00001158  4241                     218          clr     D1
0000115A  4242                     219          clr     D2
0000115C  4244                     220          clr     D4
0000115E                           221      
0000115E  43F8 014F                222          lea     ASCIItoHexMsg,A1
00001162  103C 000E                223          move.b  #14,D0
00001166  4E4F                     224          trap    #15
00001168                           225  
00001168  4E75                     226          rts
0000116A                           227          
0000116A                           228  * -- End of Hex to ASCII & ASCII to HEX --*
0000116A                           229  
0000116A                           230  * Put program code here
0000116A                           231  
0000116A  FFFF FFFF                232      SIMHALT             ; halt simulator
0000116E                           233  
0000116E                           234  * Put variables and constants here
0000116E                           235  
0000116E                           236      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ASCII2HEX_INIT      10FE
ASCIITOHEX          10F0
ASCIITOHEXMSG       14F
CHECKADDRESS        10B8
CLEAR_REGISTERS     102A
CONTINUEORNOTMSG    1CC
CONVERSION_LOOP     1104
CR                  D
CREATORS            1F
DONE                1158
ENDADDRESSINC       E4
ENDOFMEMLOOP        173
END_ADDR_BUFFER     300
ERROR               1148
ERRORMSG            11E
EXITMSG             1EF
GETENDADDRESS       109E
GETSTARTADDRESS     1084
HELPMSG             190
HEXTOASCIIMSG       12D
INPUTISINC          C7
INPUTMSG1           4E
INPUTMSG2           8F
LETTERS_CAP         1124
LF                  A
MEMSEARCH           10BC
MEMSEARCHLOOP       10C4
MEMSEARCH_DONE      10D6
MENU                1066
NUMBERS             1136
OPCODE_DECODE       10EE
START               1000
STARTINGMSG         0
START_ADDR_BUFFER   200
TERMINATEORCONT     10E2
