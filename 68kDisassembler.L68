00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 5/22/2020 8:23:32 AM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :  68k Disassebler
00000000                             3  * Written by :  Dj Wadhwa, Mohammed Ali, Tarcisius Hartanto
00000000                             4  * Date       :  June 2nd, 2020
00000000                             5  * Description:  This program decodes machine code and turns it into assembly code for the 68k processor
00000000                             6  *-----------------------------------------------------------
00000000  =0000000D                  7  CR  EQU $0D
00000000  =0000000A                  8  LF  EQU $0A
00000000                             9  
00000000= 54 68 69 73 20 69 ...     10  StartingMsg         dc.b    'This is our 68k Disassembler',CR,LF,0
0000001F= 43 72 65 61 74 6F ...     11  Creators            dc.b    'Creators: Mohammed Ali, DJ Wadhwa, Tarcisius',CR,LF,0
0000004E                            12  
0000004E= 53 74 61 72 74 20 ...     13  InputMsg1           dc.b    'Start by giving a starting address in range (00009000,00FFFFFF) ',0
0000008F= 4E 6F 77 20 67 69 ...     14  InputMsg2           dc.b    'Now give an ending adress in range (00009000,00FFFFFF) ',0
000000C7= 54 68 69 73 20 69 ...     15  InputIsInc          dc.b    'This input is not an address',0
000000E4= 54 68 65 20 65 6E ...     16  EndAddressInc       dc.b    'The end address is before the starting address, TRY AGAIN',0
0000011E= 45 72 72 6F 72 20 ...     17  ErrorMsg            dc.b    'Error in Input',0
0000012D                            18  
0000012D= 43 6F 6D 70 6C 65 ...     19  HextoASCIIMsg       dc.b    'Completed hex to ASCII conversion',0
0000014F= 43 6F 6D 70 6C 65 ...     20  ASCIItoHexMsg       dc.b    'Completed ASCII to hex conversion',CR,LF,0
00000173                            21  
00000173= 2D 2D 2D 2D 2D 2D ...     22  EndOfMemLoop        dc.b    '-------End of mem loop----',CR,LF,0
00000190= 49 6E 70 75 74 73 ...     23  HelpMsg             dc.b    'Inputs must be in hexadecimal in this format --> FFFFFFFF',CR,LF,0
000001CC= 57 6F 75 6C 64 20 ...     24  ContinueOrNotMsg    dc.b    'Would you like to Contunue or quit',0
000001EF= 45 78 69 74 74 69 ...     25  ExitMsg             dc.b    'Exitting Program',0
00000200                            26  
00000200                            27  START_ADDR_BUFFER  DS.B    256
00000300                            28  END_ADDR_BUFFER    DS.B    256
00000400                            29  
00000400                            30  
00001000                            31      ORG    $1000    *Start at address $1000
00001000                            32  START:                  ; first instruction of program
00001000                            33  
00001000                            34  *---------- Beginning Messages ----------*
00001000                            35      
00001000  103C 000E                 36      move.b      #14,D0
00001004  43F8 0000                 37      lea         StartingMsg,A1 
00001008  4E4F                      38      trap        #15
0000100A                            39      
0000100A  103C 000E                 40      move.b      #14,D0
0000100E  43F8 001F                 41      lea         Creators,A1
00001012  4E4F                      42      trap        #15
00001014                            43      
00001014  4EB9 0000102A             44      jsr         MENU
0000101A                            45      
0000101A                            46      
0000101A                            47  * ---------- END OF PROGRAM -------------*
0000101A                            48  
0000101A  103C 000E                 49      move.b      #14,D0
0000101E  43F8 01EF                 50      lea         ExitMsg,A1 
00001022  4E4F                      51      trap        #15
00001024                            52      
00001024  103C 0009                 53      move.b      #9,D0
00001028  4E4F                      54      trap        #15
0000102A                            55  * ---------------------------------------*
0000102A                            56      
0000102A                            57  *-- End of Opening and Ending Messages --*
0000102A                            58  
0000102A                            59  *--------- Start of I/O Section ---------*
0000102A                            60  
0000102A                            61  MENU:
0000102A  4EB9 00001044             62      jsr         GetStartAddress
00001030  4EB9 0000105E             63      jsr         GetEndAddress
00001036  4EB9 00001078             64      jsr         CheckAddress
0000103C                            65      
0000103C  4EB9 0000107E             66      jsr         MemSearch
00001042  4E75                      67      rts
00001044                            68      
00001044                            69  GetStartAddress:
00001044                            70      
00001044  103C 000E                 71      move.b      #14, D0         *Display input message
00001048  43F8 004E                 72      lea         InputMsg1,A1
0000104C  4E4F                      73      trap        #15
0000104E                            74      
0000104E  103C 0002                 75      move.b      #2,D0
00001052  4E4F                      76      trap        #15
00001054                            77          
00001054  4EB9 000010B2             78      jsr ASCIItoHex              *conversion to Hex
0000105A                            79      * Address Located in D6
0000105A  2846                      80      movea.l     D6,A4           *move into address register 4
0000105C  4E75                      81      rts
0000105E                            82      
0000105E                            83      
0000105E                            84  GetEndAddress:
0000105E  103C 000E                 85      move.b      #14,D0          *Display input message
00001062  43F8 008F                 86      lea         InputMsg2,A1
00001066  4E4F                      87      trap        #15
00001068                            88      
00001068  103C 0002                 89      move.b      #2,D0
0000106C  4E4F                      90      trap        #15
0000106E                            91      
0000106E  4EB9 000010B2             92      jsr         ASCIItoHex      *conversion to hex
00001074                            93      * Address Located in D6 (overwrite)
00001074  2A46                      94      movea.l     D6,A5           *move into address register 5
00001076  4E75                      95      rts
00001078                            96      
00001078                            97  CheckAddress:
00001078  BBCC                      98      cmp.l       A4,A5
0000107A  67AE                      99      beq         Menu
0000107C                           100      
0000107C  4E75                     101      rts
0000107E                           102      
0000107E                           103  MemSearch:
0000107E  4EB9 00001086            104      jsr MemSearchLoop
00001084  4E75                     105      rts
00001086                           106      
00001086                           107  MemSearchLoop:
00001086                           108      
00001086                           109      * Check if we reached the end address
00001086  BBCC                     110      cmp.l       A4,A5
00001088  6700 000E                111      beq         MemSearch_Done
0000108C                           112      
0000108C                           113      * Get data from memory
0000108C  3014                     114      move.w     (A4),D0
0000108E                           115      * OPCODE Word Located in D0
0000108E  4EB9 000010B0            116      jsr         OPCODE_DECODE
00001094                           117          
00001094                           118      
00001094                           119      
00001094                           120      
00001094  544C                     121      adda.w      #2,A4
00001096  60EE                     122      bra         MemSearchLoop
00001098                           123      
00001098                           124      
00001098                           125  MemSearch_Done:
00001098  103C 000E                126      move.b      #14,D0
0000109C  43F8 0173                127      lea         EndOfMemLoop,A1 
000010A0  4E4F                     128      trap        #15
000010A2  4E75                     129      rts
000010A4                           130      
000010A4                           131  TerminateOrCont:
000010A4                           132      * Used to check if user would like to terminate the program or continue to disassemble more data
000010A4  103C 000E                133      move.b      #14,D0
000010A8  43F8 01CC                134      lea         ContinueOrNotMsg,A1 
000010AC  4E4F                     135      trap        #15
000010AE                           136      
000010AE  4E75                     137      rts 
000010B0                           138  
000010B0                           139  * -------- Start of Opcode Section -------*    
000010B0                           140  
000010B0                           141  OPCODE_DECODE:
000010B0                           142      * Begin OPCODE Decoding here
000010B0                           143      * Check first four bits and begin
000010B0                           144      * if-branch breakdown
000010B0  4E75                     145      rts
000010B2                           146  
000010B2                           147      
000010B2                           148  * -------- End of Opcode Section --------*   
000010B2                           149  
000010B2                           150  * ----- Hex to ASCII & ASCII to HEX -----*
000010B2                           151  
000010B2                           152  ASCIItoHex:
000010B2  4EB9 000010C0            153          jsr     ASCII2Hex_init  
000010B8  4EB9 000010C6            154          jsr     conversion_loop
000010BE  4E75                     155          rts                    
000010C0                           156  
000010C0                           157  ASCII2Hex_init:   
000010C0  143C 0000                158          move.b  #0,D2      
000010C4  4E75                     159          rts         
000010C6                           160          
000010C6                           161  conversion_loop:            
000010C6  5282                     162          add.l   #1,D2     
000010C8  B4BC 00000009            163          cmp.l   #9,D2 
000010CE  6700 004A                164          BEQ     DONE        
000010D2  1819                     165          move.b  (A1)+,D4    
000010D4                           166          
000010D4  B83C 0040                167          cmp.b   #$40,D4        
000010D8  6E00 000C                168          bgt     Letters_Cap  
000010DC                           169          
000010DC  B83C 0039                170          cmp.b   #$39,D4
000010E0  6F00 0016                171          BLE     Numbers      
000010E4  4E75                     172          rts
000010E6                           173          
000010E6                           174  Letters_Cap:      
000010E6  B83C 0046                175          cmp.b   #$46,D4          
000010EA  6E00 001E                176          bgt     ERROR  
000010EE  0404 0037                177          sub.b   #$37,D4     
000010F2  E986                     178          asl.l   #4,D6       
000010F4  DC84                     179          add.l   D4,D6     
000010F6  60CE                     180          bra     conversion_loop 
000010F8                           181  Numbers:
000010F8  B83C 0030                182          cmp.b   #$30,D4         
000010FC  6D00 000C                183          blt     ERROR        
00001100  0404 0030                184          sub.b   #$30,D4      
00001104  E986                     185          asl.l   #4,D6        
00001106  DC84                     186          add.l   D4,D6     
00001108  60BC                     187          bra     conversion_loop
0000110A                           188          
0000110A                           189  ERROR:
0000110A  43F8 011E                190          lea     ErrorMsg,A1    
0000110E  103C 000E                191          move.b  #14,D0
00001112  4E4F                     192          trap    #15
00001114                           193      
00001114  103C 0009                194          move.b  #9,D0
00001118  4E4F                     195          trap    #15
0000111A                           196          
0000111A                           197  DONE:
0000111A                           198     
0000111A  4241                     199          clr     D1
0000111C  4242                     200          clr     D2
0000111E  4244                     201          clr     D4
00001120                           202      
00001120  43F8 014F                203          lea     ASCIItoHexMsg,A1
00001124  103C 000E                204          move.b  #14,D0
00001128  4E4F                     205          trap    #15
0000112A                           206  
0000112A  4E75                     207          rts
0000112C                           208          
0000112C                           209  * -- End of Hex to ASCII & ASCII to HEX --*
0000112C                           210  
0000112C                           211  * Put program code here
0000112C                           212  
0000112C  FFFF FFFF                213      SIMHALT             ; halt simulator
00001130                           214  
00001130                           215  * Put variables and constants here
00001130                           216  
00001130                           217      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ASCII2HEX_INIT      10C0
ASCIITOHEX          10B2
ASCIITOHEXMSG       14F
CHECKADDRESS        1078
CONTINUEORNOTMSG    1CC
CONVERSION_LOOP     10C6
CR                  D
CREATORS            1F
DONE                111A
ENDADDRESSINC       E4
ENDOFMEMLOOP        173
END_ADDR_BUFFER     300
ERROR               110A
ERRORMSG            11E
EXITMSG             1EF
GETENDADDRESS       105E
GETSTARTADDRESS     1044
HELPMSG             190
HEXTOASCIIMSG       12D
INPUTISINC          C7
INPUTMSG1           4E
INPUTMSG2           8F
LETTERS_CAP         10E6
LF                  A
MEMSEARCH           107E
MEMSEARCHLOOP       1086
MEMSEARCH_DONE      1098
MENU                102A
NUMBERS             10F8
OPCODE_DECODE       10B0
START               1000
STARTINGMSG         0
START_ADDR_BUFFER   200
TERMINATEORCONT     10A4
