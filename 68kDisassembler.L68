00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 5/17/2020 4:40:47 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :  68k Disassebler
00000000                             3  * Written by :  Dj Wadhwa, Mohammed Ali, Tarcisius Hartanto
00000000                             4  * Date       :  June 2nd, 2020
00000000                             5  * Description:  This program decodes machine code and turns it into assembly code for the 68k processor
00000000                             6  *-----------------------------------------------------------
00000000  =0000000D                  7  CR  EQU $0D
00000000  =0000000A                  8  LF  EQU $0A
00000000                             9  
00000000= 54 68 69 73 20 69 ...     10  StartingMsg         dc.b    'This is our 68k Disassembler',CR,LF,0
0000001F= 43 72 65 61 74 6F ...     11  Creators            dc.b    'Creators: Mohammed Ali, DJ Wadhwa, Tarcisius',CR,LF,0
0000004E                            12  
0000004E= 53 74 61 72 74 20 ...     13  InputMsg1           dc.b    'Start by giving a starting address in range (00001000,00FFFFFF) ',0
0000008F= 4E 6F 77 20 67 69 ...     14  InputMsg2           dc.b    'Now give an ending adress in range (00001000,00FFFFFF) ',0
000000C7= 54 68 69 73 20 69 ...     15  InputIsInc          dc.b    'This input is not an address',0
000000E4= 54 68 65 20 65 6E ...     16  EndAddressInc       dc.b    'The end address is before the starting address, TRY AGAIN',0
0000011E= 45 72 72 6F 72 20 ...     17  ErrorMsg            dc.b    'Error in Input',0
0000012D                            18  
0000012D= 43 6F 6D 70 6C 65 ...     19  HextoASCIIMsg       dc.b    'Completed hex to ASCII conversion',0
0000014F= 43 6F 6D 70 6C 65 ...     20  ASCIItoHexMsg       dc.b    'Completed ASCII to hex conversion',CR,LF,0
00000173                            21  
00000173= 49 6E 70 75 74 73 ...     22  HelpMsg             dc.b    'Inputs must be in hexadecimal in this format --> FFFFFFFF',CR,LF,0
000001AF= 57 6F 75 6C 64 20 ...     23  ContinueOrNotMsg    dc.b    'Would you like to Contunue or quit',0
000001D2= 45 78 69 74 74 69 ...     24  ExitMsg             dc.b    'Exitting Program',0
000001E3                            25  
000001E3                            26  
00001000                            27      ORG    $1000    *Start at address $1000
00001000                            28  START:                  ; first instruction of program
00001000                            29  
00001000                            30  *---------- Beginning Messages ----------*
00001000                            31      
00001000  103C 000E                 32      move.b      #14,D0
00001004  43F8 0000                 33      lea         StartingMsg,A1 
00001008  4E4F                      34      trap        #15
0000100A                            35      
0000100A  103C 000E                 36      move.b      #14,D0
0000100E  43F8 001F                 37      lea         Creators,A1
00001012  4E4F                      38      trap        #15
00001014                            39      
00001014  4EB9 0000101A             40      jsr         MENU
0000101A                            41      
0000101A                            42  *---------- End of Beginning Messages ----------*
0000101A                            43  
0000101A                            44  *---------- Start of I/O Section ----------*
0000101A                            45  
0000101A                            46  MENU:
0000101A  4EB9 00001026             47      jsr         GetStartAddress
00001020                            48      
00001020  4EB9 0000103C             49      jsr         GetEndAddress
00001026                            50      
00001026                            51      
00001026                            52      
00001026                            53  GetStartAddress:
00001026                            54      
00001026  103C 000E                 55      move.b      #14, D0
0000102A  43F8 004E                 56      lea         InputMsg1,A1
0000102E  4E4F                      57      trap        #15
00001030                            58      
00001030  103C 0002                 59      move.b      #2,D0
00001034  4E4F                      60      trap        #15
00001036                            61      
00001036  4EB9 00001052             62      jsr ASCIItoHex
0000103C                            63      
0000103C                            64  GetEndAddress:
0000103C  103C 000E                 65      move.b      #14,D0
00001040  43F8 008F                 66      lea         InputMsg2,A1
00001044  4E4F                      67      trap        #15
00001046                            68      
00001046  103C 0002                 69      move.b      #2,D0
0000104A  4E4F                      70      trap        #15
0000104C                            71      
0000104C  4EB9 00001052             72      jsr         ASCIItoHex
00001052                            73      
00001052                            74  ASCIItoHex:
00001052  4EB9 00001060             75          jsr     ASCII2Hex_init  
00001058  4EB9 00001066             76          jsr     conversion_loop
0000105E  4E75                      77          rts                    
00001060                            78  
00001060                            79  ASCII2Hex_init:   
00001060  143C 0000                 80          move.b  #0,D2      
00001064  4E75                      81          rts         
00001066                            82          
00001066                            83  conversion_loop:            
00001066  5282                      84          add.l   #1,D2     
00001068  B4BC 00000009             85          cmp.l   #9,D2 
0000106E  6700 004A                 86          BEQ     DONE        
00001072  1819                      87          move.b  (A1)+,D4    
00001074                            88          
00001074  B83C 0040                 89          cmp.b   #$40,D4        
00001078  6E00 000C                 90          bgt     Letters_Cap  
0000107C                            91          
0000107C  B83C 0039                 92          cmp.b   #$39,D4
00001080  6F00 0016                 93          BLE     Numbers      
00001084  4E75                      94          rts
00001086                            95          
00001086                            96  Letters_Cap:      
00001086  B83C 0046                 97          cmp.b   #$46,D4          
0000108A  6E00 001E                 98          bgt     ERROR  
0000108E  0404 0037                 99          sub.b   #$37,D4     
00001092  E986                     100          asl.l   #4,D6       
00001094  DC84                     101          add.l   D4,D6     
00001096  60CE                     102          bra     conversion_loop 
00001098                           103  Numbers:
00001098  B83C 0030                104          cmp.b   #$30,D4         
0000109C  6D00 000C                105          blt     ERROR        
000010A0  0404 0030                106          sub.b   #$30,D4      
000010A4  E986                     107          asl.l   #4,D6        
000010A6  DC84                     108          add.l   D4,D6     
000010A8  60BC                     109          bra     conversion_loop
000010AA                           110          
000010AA                           111  ERROR:
000010AA  43F8 011E                112          lea     ErrorMsg,A1    
000010AE  103C 000E                113          move.b  #14,D0
000010B2  4E4F                     114          trap    #15
000010B4                           115      
000010B4  103C 0009                116          move.b  #9,D0
000010B8  4E4F                     117          trap    #15
000010BA                           118          
000010BA                           119  DONE:
000010BA                           120     
000010BA  4241                     121          clr     D1
000010BC  4242                     122          clr     D2
000010BE  4244                     123          clr     D4
000010C0                           124      
000010C0  43F8 014F                125          lea     ASCIItoHexMsg,A1
000010C4  103C 000E                126          move.b  #14,D0
000010C8  4E4F                     127          trap    #15
000010CA                           128  
000010CA  4E75                     129          rts
000010CC                           130  
000010CC                           131  * Put program code here
000010CC                           132  
000010CC  FFFF FFFF                133      SIMHALT             ; halt simulator
000010D0                           134  
000010D0                           135  * Put variables and constants here
000010D0                           136  
000010D0                           137      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ASCII2HEX_INIT      1060
ASCIITOHEX          1052
ASCIITOHEXMSG       14F
CONTINUEORNOTMSG    1AF
CONVERSION_LOOP     1066
CR                  D
CREATORS            1F
DONE                10BA
ENDADDRESSINC       E4
ERROR               10AA
ERRORMSG            11E
EXITMSG             1D2
GETENDADDRESS       103C
GETSTARTADDRESS     1026
HELPMSG             173
HEXTOASCIIMSG       12D
INPUTISINC          C7
INPUTMSG1           4E
INPUTMSG2           8F
LETTERS_CAP         1086
LF                  A
MENU                101A
NUMBERS             1098
START               1000
STARTINGMSG         0
