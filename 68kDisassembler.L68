00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 5/24/2020 10:36:59 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :  68k Disassebler
00000000                             3  * Written by :  Dj Wadhwa, Mohammed Ali, Tarcisius Hartanto
00000000                             4  * Date       :  June 2nd, 2020
00000000                             5  * Description:  This program decodes machine code and turns it into assembly code for the 68k processor
00000000                             6  *-----------------------------------------------------------
00000000  =0000000D                  7  CR  EQU $0D
00000000  =0000000A                  8  LF  EQU $0A
00000000                             9  
00000000= 54 68 69 73 20 69 ...     10  StartingMsg         dc.b    'This is our 68k Disassembler',CR,LF,0
0000001F= 43 72 65 61 74 6F ...     11  Creators            dc.b    'Creators: Mohammed Ali, DJ Wadhwa, Tarcisius',CR,LF,0
0000004E                            12  
0000004E= 53 74 61 72 74 20 ...     13  InputMsg1           dc.b    'Start by giving a starting address in range (00009000,00FFFFFF) ',0
0000008F= 4E 6F 77 20 67 69 ...     14  InputMsg2           dc.b    'Now give an ending adress in range (00009000,00FFFFFF) ',0
000000C7= 54 68 69 73 20 69 ...     15  InputIsInc          dc.b    'This input is not an address',0
000000E4= 54 68 65 20 65 6E ...     16  EndAddressInc       dc.b    'The end address is before the starting address, TRY AGAIN',0
0000011E= 45 72 72 6F 72 20 ...     17  ErrorMsg            dc.b    'Error in Input',0
0000012D                            18  
0000012D= 43 6F 6D 70 6C 65 ...     19  HextoASCIIMsg       dc.b    'Completed hex to ASCII conversion',0
0000014F= 43 6F 6D 70 6C 65 ...     20  ASCIItoHexMsg       dc.b    'Completed ASCII to hex conversion',CR,LF,0
00000173                            21  
00000173= 2D 2D 2D 2D 2D 2D ...     22  EndOfMemLoop        dc.b    '-------End of mem loop----',CR,LF,0
00000190= 49 6E 70 75 74 73 ...     23  HelpMsg             dc.b    'Inputs must be in hexadecimal in this format --> FFFFFFFF',CR,LF,0
000001CC= 57 6F 75 6C 64 20 ...     24  ContinueOrNotMsg    dc.b    'Would you like to Contunue or quit',0
000001EF= 45 78 69 74 69 6E ...     25  ExitMsg             dc.b    'Exiting Program',0
000001FF                            26  
000001FF                            27  START_ADDR_BUFFER  DS.B    256
000002FF                            28  END_ADDR_BUFFER    DS.B    256
000003FF                            29  
000003FF                            30  *size
000003FF= 4C 20 00                  31  long                DC.B    'L ',0
00000402= 57 20 00                  32  word                DC.B    'W ',0
00000405= 42 20 00                  33  byte                DC.B    'B ',0
00000408                            34  
00000408                            35  *instructions
00000408= 4E 4F 50 00               36  nop_ins             DC.B    'NOP',0
0000040C= 52 54 53 00               37  rts_ins             DC.B    'RTS',0
00000410= 4D 4F 56 45 2E 00         38  move_ins            DC.B    'MOVE.',0
00000416= 4D 4F 56 45 51 2E 00      39  moveq_ins           DC.B    'MOVEQ.',0
0000041D= 4D 4F 56 45 4D 2E 00      40  movem_ins           DC.B    'MOVEM.',0
00000424= 4D 4F 56 45 41 2E 00      41  movea_ins           DC.B    'MOVEA.',0
0000042B= 41 44 44 2E 00            42  add_ins             DC.B    'ADD.',0
00000430= 41 44 44 41 2E 00         43  adda_ins            DC.B    'ADDA.',0
00000436= 41 44 44 51 2E 00         44  addq_ins            DC.B    'ADDQ.',0
0000043C= 4F 52 2E 00               45  or_ins              DC.B    'OR.',0
00000440= 41 4E 44 2E 00            46  and_ins             DC.B    'AND.',0
00000445= 53 55 42 2E 00            47  sub_ins             DC.B    'SUB.',0
0000044A                            48  
0000044A                            49  *EA
0000044A= 44 00                     50  D_reg               DC.B    'D',0
0000044C= 41 00                     51  A_reg               DC.B    'A',0
0000044E= 28 41 00                  52  open_paran          DC.B    '(A',0
00000451= 29 00                     53  close_paran         DC.B    ')',0
00000453= 29 2B 00                  54  post_inc            DC.B    ')+',0
00000456= 2D 28 41 00               55  pre_dec             DC.B    '-(A',0
0000045A= 2C 20 00                  56  comma               DC.B    ', ',0
0000045D= 0D 0A 00                  57  return              DC.B    CR,LF,0
00000460                            58  
00001000                            59      ORG    $1000    *Start at address $1000
00001000                            60  START:                  ; first instruction of program
00001000                            61  
00001000                            62  *---------- Test value, will remove in final build ----------*
00001000                            63  
00001000  33FC 4E75 00009234        64      Move.W #$4E75,$00009234 *RTS
00001008  33FC 3C05 00009236        65      MOVE.W #$3C05,$00009236 *MOVE.W D5,D6
00001010  33FC 2447 00009238        66      MOVE.W #$2447,$00009238 *MOVE.L D7,A2
00001018  33FC 4E71 0000923A        67      MOVE.W #$4E71,$0000923A *NOP
00001020  33FC D95C 0000923C        68      MOVE.W #$D95C,$0000923C *ADD.W D0,(A4)+
00001028  33FC D3C2 0000923E        69      MOVE.W #$D3C2,$0000923E *ADDA.L D2,A1
00001030  33FC 9822 00009240        70      MOVE.W #$9822,$00009240 *SUB.B -(A2),D4
00001038  33FC C246 00009242        71      MOVE.W #$C246,$00009242 *AND.W D6,D1
00001040  33FC 8593 00009244        72      MOVE.W #$8593,$00009244 *OR.L D2,(A3)
00001048                            73      
00001048                            74  *---------- END Test ----------*
00001048                            75  
00001048                            76  
00001048                            77  
00001048                            78  *---------- Beginning Messages ----------*
00001048                            79      
00001048  103C 000E                 80      move.b      #14,D0
0000104C  43F8 0000                 81      lea         StartingMsg,A1 
00001050  4E4F                      82      trap        #15
00001052                            83      
00001052  103C 000E                 84      move.b      #14,D0
00001056  43F8 001F                 85      lea         Creators,A1
0000105A  4E4F                      86      trap        #15
0000105C                            87      
0000105C  4EB9 000010AE             88      jsr         MENU
00001062                            89      
00001062                            90      
00001062                            91  * ---------- END OF PROGRAM -------------*
00001062                            92  
00001062  103C 000E                 93      move.b      #14,D0
00001066  43F8 01EF                 94      lea         ExitMsg,A1 
0000106A  4E4F                      95      trap        #15
0000106C                            96      
0000106C  103C 0009                 97      move.b      #9,D0
00001070  4E4F                      98      trap        #15
00001072                            99  * ---------------------------------------*
00001072                           100      
00001072                           101  *-- End of Opening and Ending Messages --*
00001072                           102  
00001072                           103  *--------- Start of I/O Section ---------*
00001072                           104  
00001072                           105  Clear_Registers:
00001072  4280                     106      clr.l     D0
00001074  4281                     107      clr.l     D1
00001076  4282                     108      clr.l     D2
00001078  4283                     109      clr.l     D3
0000107A  4284                     110      clr.l     D4
0000107C  4285                     111      clr.l     D5
0000107E  4286                     112      clr.l     D6
00001080  4287                     113      clr.l     D7
00001082                           114      
00001082  207C 00000000            115      movea.l   #0,A0
00001088  227C 00000000            116      movea.l   #0,A1
0000108E  247C 00000000            117      movea.l   #0,A2
00001094  267C 00000000            118      movea.l   #0,A3
0000109A  287C 00000000            119      movea.l   #0,A4
000010A0  2A7C 00000000            120      movea.l   #0,A5
000010A6  2C7C 00000000            121      movea.l   #0,A6
000010AC  4E75                     122      rts
000010AE                           123  
000010AE                           124  MENU:
000010AE  4EB8 1072                125      jsr         Clear_Registers
000010B2  4EB9 000010CC            126      jsr         GetStartAddress
000010B8  4EB9 000010E6            127      jsr         GetEndAddress
000010BE  4EB9 00001100            128      jsr         CheckAddress
000010C4                           129      
000010C4  4EB9 00001104            130      jsr         MemSearch
000010CA  4E75                     131      rts
000010CC                           132      
000010CC                           133  GetStartAddress:
000010CC                           134      
000010CC  103C 000E                135      move.b      #14, D0         *Display input message
000010D0  43F8 004E                136      lea         InputMsg1,A1
000010D4  4E4F                     137      trap        #15
000010D6                           138      
000010D6  103C 0002                139      move.b      #2,D0
000010DA  4E4F                     140      trap        #15
000010DC                           141          
000010DC  4EB9 00001474            142      jsr ASCIItoHex              *conversion to Hex
000010E2                           143      * Address Located in D6
000010E2  2846                     144      movea.l     D6,A4           *move into address register 4
000010E4  4E75                     145      rts
000010E6                           146      
000010E6                           147      
000010E6                           148  GetEndAddress:
000010E6  103C 000E                149      move.b      #14,D0          *Display input message
000010EA  43F8 008F                150      lea         InputMsg2,A1
000010EE  4E4F                     151      trap        #15
000010F0                           152      
000010F0  103C 0002                153      move.b      #2,D0
000010F4  4E4F                     154      trap        #15
000010F6                           155      
000010F6  4EB9 00001474            156      jsr         ASCIItoHex      *conversion to hex
000010FC                           157      * Address Located in D6 (overwrite)
000010FC  2A46                     158      movea.l     D6,A5           *move into address register 5
000010FE  4E75                     159      rts
00001100                           160      
00001100                           161  CheckAddress:
00001100  BBCC                     162      cmp.l       A4,A5
00001102  67AA                     163      beq         Menu
00001104                           164  
00001104                           165      
00001104                           166  MemSearch:
00001104  4EB9 0000110C            167      jsr MemSearchLoop
0000110A  4E75                     168      rts
0000110C                           169      
0000110C                           170  MemSearchLoop:
0000110C                           171      
0000110C                           172      * Check if we reached the end address
0000110C  BBCC                     173      cmp.l       A4,A5
0000110E  6700 0010                174      beq         MemSearch_Done
00001112                           175      
00001112                           176      * Get data from memory
00001112  3414                     177      move.w     (A4),D2
00001114  3602                     178      move.w      D2, D3  mutable copy in D3
00001116                           179      * OPCODE Word Located in D2, mutable copy in D3
00001116  4EB9 00001138            180      jsr         OPCODE_DECODE    
0000111C                           181      
0000111C  544C                     182      adda.w      #2,A4
0000111E  60EC                     183      bra         MemSearchLoop
00001120                           184      
00001120                           185      
00001120                           186  MemSearch_Done:
00001120  103C 000E                187      move.b      #14,D0
00001124  43F8 0173                188      lea         EndOfMemLoop,A1 
00001128  4E4F                     189      trap        #15
0000112A  4E75                     190      rts
0000112C                           191      
0000112C                           192  TerminateOrCont:
0000112C                           193      * Used to check if user would like to terminate the program or continue to disassemble more data
0000112C  103C 000E                194      move.b      #14,D0
00001130  43F8 01CC                195      lea         ContinueOrNotMsg,A1 
00001134  4E4F                     196      trap        #15
00001136                           197      
00001136  4E75                     198      rts 
00001138                           199  
00001138                           200  * -------- Start of Opcode Section -------*    
00001138                           201  
00001138                           202  OPCODE_DECODE:
00001138                           203      * Begin OPCODE Decoding here
00001138                           204      * Check first four bits and begin
00001138                           205      * if-branch breakdown
00001138  4244                     206      CLR D4
0000113A  4245                     207      CLR D5
0000113C  4246                     208      CLR D6
0000113E  4247                     209      CLR D7
00001140                           210      
00001140  B47C 4E71                211      CMP.W #$4E71, D2        
00001144  6700 0054                212      BEQ print_nop           *check if value is NOP
00001148                           213      
00001148  B47C 4E75                214      CMP.W #$4E75, D2        
0000114C  6700 0056                215      BEQ print_rts           *check if value is RTS
00001150                           216      
00001150  C67C F000                217      AND.W #$F000,D3
00001154                           218      
00001154  B67C 9000                219      CMP.W #$9000,D3
00001158  6700 014C                220      BEQ print_sub_and_or    *check if value is SUB
0000115C                           221      
0000115C  B67C 8000                222      CMP.W #$8000, D3
00001160  6700 0144                223      BEQ print_sub_and_or            *check if value is OR
00001164                           224  
00001164  B67C C000                225      CMP.W #$C000,D3
00001168  6700 013C                226      BEQ print_sub_and_or            *check if value is AND
0000116C                           227      
0000116C  B67C D000                228      CMP.W #$D000,D3
00001170  6700 008C                229      BEQ print_add_adda      *check if value is ADD or ADDA
00001174                           230      
00001174  B47C 1000                231      CMP.W #$1000,D2
00001178  6D00 000A                232      BLT invalid
0000117C  B47C 4000                233      CMP.W #$4000, D2
00001180  6D00 002C                234      BLT print_move_movea    *check if value is MOVE or MOVEA
00001184                           235      
00001184                           236      
00001184  4240                     237  invalid CLR D0    *need to add stuff to this
00001186                           238      
00001186  4E75                     239  out rts
00001188                           240  
00001188                           241      
00001188                           242  * -------- End of Opcode Section --------*   
00001188                           243  
00001188                           244  * --------- Print Instruction ----------*
00001188                           245  
00001188                           246  print:
00001188  4240                     247      CLR D0 
0000118A  103C 000E                248      MOVE.B #14,D0
0000118E  4E4F                     249      TRAP #15
00001190  4E75                     250      RTS
00001192                           251  
00001192                           252  println:
00001192  103C 000D                253      MOVE.B #13, D0
00001196  4E4F                     254      TRAP #15
00001198  4E75                     255      RTS
0000119A                           256      
0000119A                           257  print_nop
0000119A  43F8 0408                258      LEA nop_ins, A1
0000119E  4EB8 1192                259      JSR println
000011A2  60E2                     260      BRA out
000011A4                           261  
000011A4                           262  print_rts
000011A4  43F8 040C                263      LEA rts_ins, A1
000011A8  4EB8 1192                264      JSR println
000011AC  60D8                     265      BRA out
000011AE                           266  
000011AE                           267  print_move_movea
000011AE  EC4B                     268      LSR.W #6, D3
000011B0  C63C 0003                269      AND.B #$3, D3
000011B4  B63C 0001                270      CMP.B #1, D3
000011B8  6700 000E                271      BEQ move_a
000011BC  43F8 0410                272      LEA move_ins, A1
000011C0  4EB8 1188                273      JSR print
000011C4  6000 000A                274      BRA m_size
000011C8  43F8 0424                275  move_a LEA movea_ins, A1
000011CC  4EB8 1188                276      JSR print
000011D0                           277  m_size 
000011D0  3802                     278      MOVE.W D2, D4
000011D2  C87C 3000                279      AND.W #$3000, D4
000011D6  4EB9 00001322            280      JSR move_size
000011DC  4EB9 0000136E            281      JSR addr
000011E2  43F8 045A                282      LEA comma, A1
000011E6  4EB8 1188                283      JSR print
000011EA  1E3C 0001                284      MOVE.B #1, D7
000011EE  4EB9 0000136E            285      JSR addr
000011F4  43F8 045D                286      LEA return, A1
000011F8  4EB8 1188                287      JSR print
000011FC  6088                     288      BRA out
000011FE                           289      
000011FE                           290  print_add_adda
000011FE  3602                     291      MOVE.W D2, D3
00001200  C63C 00C0                292      AND.B #$C0, D3
00001204  B63C 00C0                293      CMP.B #$C0, D3
00001208  6700 0052                294      BEQ add_a
0000120C  43F8 042B                295      LEA add_ins, A1
00001210  4EB8 1188                296      JSR print
00001214  4244                     297      CLR D4
00001216  1803                     298      MOVE.B D3,D4
00001218  4EB9 0000135A            299      JSR size
0000121E  3602                     300      MOVE.W D2,D3
00001220  C67C 0100                301      AND.W #$0100, D3
00001224  B67C 0100                302      CMP.W #$0100, D3
00001228  6700 001A                303      BEQ ea_dest_add 
0000122C  4EB9 0000136E            304      JSR addr            *if Direction bit is 0
00001232  43F8 045A                305      LEA comma, A1
00001236  4EB8 1188                306      JSR print
0000123A  4EB9 00001448            307      JSR data_reg_sr
00001240  6000 0058                308      BRA end_add
00001244                           309  ea_dest_add             *if Direction bit is 1
00001244  4EB9 00001448            310      JSR data_reg_sr
0000124A  43F8 045A                311      LEA comma, A1
0000124E  4EB8 1188                312      JSR print
00001252  4EB9 0000136E            313      JSR addr
00001258  6000 0040                314      BRA end_add
0000125C                           315  add_a
0000125C  43F8 0430                316      LEA adda_ins, A1
00001260  4EB8 1188                317      JSR print
00001264  3602                     318      MOVE.W D2,D3
00001266  C67C 0100                319      AND.W #$0100, D3
0000126A  B67C 0100                320      CMP.W #$0100, D3
0000126E  6700 000E                321      BEQ add_size
00001272  43F8 0402                322      LEA word, A1
00001276  4EB8 1188                323      JSR print
0000127A  6000 000A                324      BRA next_add
0000127E                           325  add_size
0000127E  43F8 03FF                326      LEA long,A1
00001282  4EB8 1188                327      JSR print
00001286                           328  next_add
00001286  4EB9 0000136E            329      JSR addr            
0000128C  43F8 045A                330      LEA comma, A1
00001290  4EB8 1188                331      JSR print
00001294  4EB9 0000145E            332      JSR add_reg_sr
0000129A                           333  end_add 
0000129A  43F8 045D                334      LEA return, A1
0000129E  4EB8 1188                335      JSR print
000012A2  6000 FEE2                336      BRA out
000012A6                           337  
000012A6                           338  
000012A6                           339  print_sub_and_or
000012A6  B67C 8000                340      CMP.W #$8000, D3
000012AA  6700 001A                341      BEQ print_or
000012AE  B67C 9000                342      CMP.W #$9000, D3
000012B2  6700 000A                343      BEQ print_sub
000012B6  43F8 0440                344      LEA and_ins, A1
000012BA  6000 000E                345      BRA print_value
000012BE                           346  print_sub
000012BE  43F8 0445                347      LEA sub_ins, A1
000012C2  6000 0006                348      BRA print_value
000012C6                           349  print_or
000012C6  43F8 043C                350      LEA or_ins, A1
000012CA                           351  print_value
000012CA  4EB8 1188                352      JSR print
000012CE  3602                     353      MOVE.W D2, D3
000012D0  C63C 00C0                354      AND.B #$C0, D3
000012D4  4244                     355      CLR D4
000012D6  1803                     356      MOVE.B D3,D4
000012D8  4EB9 0000135A            357      JSR size
000012DE  3602                     358      MOVE.W D2,D3
000012E0  C67C 0100                359      AND.W #$0100, D3
000012E4  B67C 0100                360      CMP.W #$0100, D3
000012E8  6700 0018                361      BEQ ea_dest_sub_and_or
000012EC  4EB9 0000136E            362      JSR addr            *if Direction bit is 0
000012F2  43F8 045A                363      LEA comma, A1
000012F6  4EB8 1188                364      JSR print
000012FA  4EB9 00001448            365      JSR data_reg_sr
00001300  6098                     366      BRA end_add
00001302                           367  ea_dest_sub_and_or      *if Direction bit is 1
00001302  4EB9 00001448            368      JSR data_reg_sr
00001308  43F8 045A                369      LEA comma, A1
0000130C  4EB8 1188                370      JSR print
00001310  4EB9 0000136E            371      JSR addr
00001316  43F8 045D                372      LEA return, A1
0000131A  4EB8 1188                373      JSR print
0000131E  6000 FE66                374      BRA out
00001322                           375  
00001322                           376  * --------- End Print Instruction ----------*
00001322                           377  
00001322                           378  * ------- Instruction sizes ---------*
00001322                           379  
00001322                           380  move_size:
00001322  B87C 1000                381      CMP.W #$1000, D4
00001326  6700 0014                382      BEQ print_b
0000132A  B87C 3000                383      CMP.W #$3000, D4
0000132E  6700 0016                384      BEQ print_w
00001332  B87C 2000                385      CMP.W #$2000, D4
00001336  6700 0018                386      BEQ print_l
0000133A  4E75                     387  out2    RTS
0000133C                           388      
0000133C                           389  print_b
0000133C  43F8 0405                390      LEA byte, A1
00001340  4EB8 1188                391      JSR print
00001344  60F4                     392      BRA out2
00001346                           393      
00001346                           394  print_w
00001346  43F8 0402                395      LEA word, A1
0000134A  4EB8 1188                396      JSR print
0000134E  60EA                     397      BRA out2
00001350                           398      
00001350                           399  print_l:
00001350  43F8 03FF                400      LEA long, A1
00001354  4EB8 1188                401      JSR print
00001358  60E0                     402      BRA out2
0000135A                           403  
0000135A                           404  size:
0000135A  B83C 0000                405      CMP.B #$00, D4
0000135E  67DC                     406      BEQ print_b
00001360  B83C 0040                407      CMP.B #$40,D4
00001364  67E0                     408      BEQ print_w
00001366  B83C 0080                409      CMP.B #$80, D4
0000136A  67E4                     410      BEQ print_l
0000136C  4E75                     411      RTS
0000136E                           412      
0000136E                           413  * ------- End Instruction sizes ---------*
0000136E                           414  
0000136E                           415  * ------- Effective Address -------*
0000136E                           416  addr:
0000136E  3A02                     417      MOVE.W D2, D5
00001370  3C02                     418      MOVE.W D2, D6               
00001372  BE3C 0001                419      CMP.B #1, D7
00001376  6700 0032                420      BEQ destination
0000137A                           421  cont
0000137A  CC3C 0038                422      AND.B #$38, D6
0000137E  BC3C 0000                423      CMP.B #0, D6
00001382  6700 0030                424      BEQ data_reg
00001386  BC3C 0008                425      CMP.B #$08, D6
0000138A  6700 003E                426      BEQ add_reg
0000138E  BC3C 0010                427      CMP.B #$10, D6
00001392  6700 004C                428      BEQ add_indirect
00001396  BC3C 0018                429      CMP.B #$18, D6
0000139A  6700 0062                430      BEQ post_increment
0000139E  BC3C 0020                431      CMP.B #$20, D6
000013A2  6700 0078                432      BEQ pre_decrement
000013A6  6000 000A                433      BRA out3 *needs Immediate, Abs Long, and Abs Word
000013AA                           434      
000013AA                           435  destination
000013AA  3C05                     436      MOVE.W D5,D6
000013AC  EF5D                     437      ROL.W #7,D5
000013AE  E64E                     438      LSR.W #3,D6
000013B0  60C8                     439      BRA cont
000013B2                           440      
000013B2  4E75                     441  out3 RTS
000013B4                           442  
000013B4                           443  data_reg
000013B4  3C05                     444      MOVE.W D5,D6    
000013B6  CC3C 0007                445      AND.B #$07, D6  
000013BA  43F8 044A                446      LEA D_reg, A1   
000013BE  4EB8 1188                447      JSR print
000013C2  4EB9 0000143C            448      JSR Xn
000013C8  60E8                     449      BRA out3
000013CA                           450  
000013CA                           451  add_reg
000013CA  3C05                     452      MOVE.W D5,D6    
000013CC  CC3C 0007                453      AND.B #$07, D6
000013D0  43F8 044C                454      LEA A_reg, A1   
000013D4  4EB8 1188                455      JSR print
000013D8  4EB9 0000143C            456      JSR Xn
000013DE  60D2                     457      BRA out3
000013E0                           458      
000013E0                           459  add_indirect
000013E0  3C05                     460      MOVE.W D5,D6    
000013E2  CC3C 0007                461      AND.B #$07, D6
000013E6  43F8 044E                462      LEA open_paran, A1  
000013EA  4EB8 1188                463      JSR print
000013EE  4EB9 0000143C            464      JSR Xn
000013F4  43F8 0451                465      LEA close_paran, A1 
000013F8  4EB8 1188                466      JSR print
000013FC  60B4                     467      BRA out3
000013FE                           468      
000013FE                           469  post_increment
000013FE  3C05                     470      MOVE.W D5,D6    
00001400  CC3C 0007                471      AND.B #$07, D6
00001404  43F8 044E                472      LEA open_paran, A1  
00001408  4EB8 1188                473      JSR print
0000140C  4EB9 0000143C            474      JSR Xn
00001412  43F8 0453                475      LEA post_inc, A1    
00001416  4EB8 1188                476      JSR print
0000141A  6096                     477      BRA out3
0000141C                           478      
0000141C                           479  pre_decrement
0000141C  3C05                     480      MOVE.W D5,D6    
0000141E  CC3C 0007                481      AND.B #$07, D6
00001422  43F8 0456                482      LEA pre_dec, A1 
00001426  4EB8 1188                483      JSR print
0000142A  4EB9 0000143C            484      JSR Xn
00001430  43F8 0451                485      LEA close_paran, A1 
00001434  4EB8 1188                486      JSR print
00001438  6000 FF78                487      BRA out3
0000143C                           488      
0000143C                           489  Xn:
0000143C  4241                     490      CLR D1
0000143E  1206                     491      MOVE.B D6,D1
00001440  103C 0003                492      MOVE.B #3, D0
00001444  4E4F                     493      TRAP #15
00001446  4E75                     494      RTS
00001448                           495  
00001448                           496  data_reg_sr:
00001448  3C02                     497      MOVE.W D2,D6
0000144A  EF5E                     498      ROL.W #7,D6
0000144C  CC3C 0007                499      AND.B #$07, D6  
00001450  43F8 044A                500      LEA D_reg, A1   
00001454  4EB8 1188                501      JSR print
00001458  4EB8 143C                502      JSR Xn
0000145C  4E75                     503      RTS
0000145E                           504      
0000145E                           505  add_reg_sr:
0000145E  3C02                     506      MOVE.W D2,D6
00001460  EF5E                     507      ROL.W #7,D6
00001462  CC3C 0007                508      AND.B #$07, D6  
00001466  43F8 044C                509      LEA A_reg, A1   
0000146A  4EB8 1188                510      JSR print
0000146E  4EB8 143C                511      JSR Xn
00001472  4E75                     512      RTS
00001474                           513  
00001474                           514  * ------- End Effective Address -------*
00001474                           515  
00001474                           516  * ----- Hex to ASCII & ASCII to HEX -----*
00001474                           517  
00001474                           518  ASCIItoHex:
00001474  4EB9 00001482            519          jsr     ASCII2Hex_init  
0000147A  4EB9 00001488            520          jsr     conversion_loop
00001480  4E75                     521          rts                    
00001482                           522  
00001482                           523  ASCII2Hex_init:   
00001482  143C 0000                524          move.b  #0,D2      
00001486  4E75                     525          rts         
00001488                           526          
00001488                           527  conversion_loop:            
00001488  5282                     528          add.l   #1,D2     
0000148A  B4BC 00000009            529          cmp.l   #9,D2 
00001490  6700 004A                530          BEQ     DONE        
00001494  1819                     531          move.b  (A1)+,D4    
00001496                           532          
00001496  B83C 0040                533          cmp.b   #$40,D4        
0000149A  6E00 000C                534          bgt     Letters_Cap  
0000149E                           535          
0000149E  B83C 0039                536          cmp.b   #$39,D4
000014A2  6F00 0016                537          BLE     Numbers      
000014A6  4E75                     538          rts
000014A8                           539          
000014A8                           540  Letters_Cap:      
000014A8  B83C 0046                541          cmp.b   #$46,D4          
000014AC  6E00 001E                542          bgt     ERROR  
000014B0  0404 0037                543          sub.b   #$37,D4     
000014B4  E986                     544          asl.l   #4,D6       
000014B6  DC84                     545          add.l   D4,D6     
000014B8  60CE                     546          bra     conversion_loop 
000014BA                           547  Numbers:
000014BA  B83C 0030                548          cmp.b   #$30,D4         
000014BE  6D00 000C                549          blt     ERROR        
000014C2  0404 0030                550          sub.b   #$30,D4      
000014C6  E986                     551          asl.l   #4,D6        
000014C8  DC84                     552          add.l   D4,D6     
000014CA  60BC                     553          bra     conversion_loop
000014CC                           554          
000014CC                           555  ERROR:
000014CC  43F8 011E                556          lea     ErrorMsg,A1    
000014D0  103C 000E                557          move.b  #14,D0
000014D4  4E4F                     558          trap    #15
000014D6                           559      
000014D6  103C 0009                560          move.b  #9,D0
000014DA  4E4F                     561          trap    #15
000014DC                           562          
000014DC                           563  DONE:
000014DC                           564     
000014DC  4241                     565          clr     D1
000014DE  4242                     566          clr     D2
000014E0  4244                     567          clr     D4
000014E2                           568      
000014E2  43F8 014F                569          lea     ASCIItoHexMsg,A1
000014E6  103C 000E                570          move.b  #14,D0
000014EA  4E4F                     571          trap    #15
000014EC                           572  
000014EC  4E75                     573          rts
000014EE                           574          
000014EE                           575  * -- End of Hex to ASCII & ASCII to HEX --*
000014EE                           576  
000014EE                           577  * Put program code here
000014EE                           578  
000014EE  FFFF FFFF                579      SIMHALT             ; halt simulator
000014F2                           580  
000014F2                           581  * Put variables and constants here
000014F2                           582  
000014F2                           583      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDA_INS            430
ADDQ_INS            436
ADDR                136E
ADD_A               125C
ADD_INDIRECT        13E0
ADD_INS             42B
ADD_REG             13CA
ADD_REG_SR          145E
ADD_SIZE            127E
AND_INS             440
ASCII2HEX_INIT      1482
ASCIITOHEX          1474
ASCIITOHEXMSG       14F
A_REG               44C
BYTE                405
CHECKADDRESS        1100
CLEAR_REGISTERS     1072
CLOSE_PARAN         451
COMMA               45A
CONT                137A
CONTINUEORNOTMSG    1CC
CONVERSION_LOOP     1488
CR                  D
CREATORS            1F
DATA_REG            13B4
DATA_REG_SR         1448
DESTINATION         13AA
DONE                14DC
D_REG               44A
EA_DEST_ADD         1244
EA_DEST_SUB_AND_OR  1302
ENDADDRESSINC       E4
ENDOFMEMLOOP        173
END_ADD             129A
END_ADDR_BUFFER     2FF
ERROR               14CC
ERRORMSG            11E
EXITMSG             1EF
GETENDADDRESS       10E6
GETSTARTADDRESS     10CC
HELPMSG             190
HEXTOASCIIMSG       12D
INPUTISINC          C7
INPUTMSG1           4E
INPUTMSG2           8F
INVALID             1184
LETTERS_CAP         14A8
LF                  A
LONG                3FF
MEMSEARCH           1104
MEMSEARCHLOOP       110C
MEMSEARCH_DONE      1120
MENU                10AE
MOVEA_INS           424
MOVEM_INS           41D
MOVEQ_INS           416
MOVE_A              11C8
MOVE_INS            410
MOVE_SIZE           1322
M_SIZE              11D0
NEXT_ADD            1286
NOP_INS             408
NUMBERS             14BA
OPCODE_DECODE       1138
OPEN_PARAN          44E
OR_INS              43C
OUT                 1186
OUT2                133A
OUT3                13B2
POST_INC            453
POST_INCREMENT      13FE
PRE_DEC             456
PRE_DECREMENT       141C
PRINT               1188
PRINTLN             1192
PRINT_ADD_ADDA      11FE
PRINT_B             133C
PRINT_L             1350
PRINT_MOVE_MOVEA    11AE
PRINT_NOP           119A
PRINT_OR            12C6
PRINT_RTS           11A4
PRINT_SUB           12BE
PRINT_SUB_AND_OR    12A6
PRINT_VALUE         12CA
PRINT_W             1346
RETURN              45D
RTS_INS             40C
SIZE                135A
START               1000
STARTINGMSG         0
START_ADDR_BUFFER   1FF
SUB_INS             445
TERMINATEORCONT     112C
WORD                402
XN                  143C
